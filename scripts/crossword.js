// Generated by CoffeeScript 1.6.3
(function() {
  var Crossword;

  Crossword = (function() {
    Crossword.prototype.typingHorizontal = true;

    Crossword.prototype.clickCounter = 0;

    function Crossword(crosswordData) {
      this.crosswordData = crosswordData;
      this.$container = $('.crossword__container');
      this.$questionsContainer = $('.questions');
      this.createCrosswordTable();
      this.createQuestionsList();
      this.bindHandlers();
    }

    Crossword.prototype.bindHandlers = function() {
      var _this = this;
      this.$clickable.on('click', function(e) {
        var $clickedTd, $prevActiveTd, sides;
        $clickedTd = $(e.target);
        sides = _this.canSides($clickedTd);
        $prevActiveTd = _this.$clickable.filter('.active');
        _this.$clickable.removeClass('active');
        $clickedTd.addClass('active');
        _this.clickCounter = $prevActiveTd.hasClass('active') ? _this.clickCounter + 1 : 1;
        if ((sides.nextHorizontal || sides.prevHorizontal) && (sides.nextVertical || sides.prevVertical)) {
          if ($clickedTd.hasClass('word') && _this.clickCounter === 1) {
            true;
          }
          if (_this.clickCounter === 1) {
            _this.chooseCells($clickedTd, true);
          } else {
            if (_this.typingHorizontal) {
              _this.chooseCells($clickedTd, false);
            } else {
              _this.chooseCells($clickedTd, true);
            }
          }
        }
        if (!(sides.nextHorizontal || sides.prevHorizontal) && (sides.nextVertical || sides.prevVertical)) {
          _this.chooseCells($clickedTd, false);
        }
        if ((sides.nextHorizontal || sides.prevHorizontal) && !(sides.nextVertical || sides.prevVertical)) {
          _this.chooseCells($clickedTd, true);
        }
        return true;
      });
      $(document).live('keypress', function(e) {
        var $activeTd, sides, tdIndX;
        $activeTd = _this.$clickable.filter('.active');
        if ($activeTd.length && e.keyCode !== 32 && e.keyCode !== 13) {
          sides = _this.canSides($activeTd);
          $activeTd.text(String.fromCharCode(e.keyCode));
          if (_this.typingHorizontal) {
            if (sides.nextHorizontal) {
              $activeTd.removeClass('active').next().addClass('active');
            }
          } else if (sides.nextVertical) {
            tdIndX = $activeTd.parent().find('td').index($activeTd);
            $activeTd.removeClass('active').parent().next().find('td').eq(tdIndX).addClass('active');
          }
        }
        return true;
      });
      $(document).live('keydown', function(e) {
        var $activeTd, sides, tdIndX, _ref;
        $activeTd = _this.$clickable.filter('.active');
        if ($activeTd.length) {
          sides = _this.canSides($activeTd);
          tdIndX = $activeTd.parent().find('td').index($activeTd);
          switch (e.keyCode) {
            case 32:
              $activeTd.trigger('click');
              break;
            case 37:
              if (sides.prevHorizontal) {
                $activeTd.removeClass('active').prev().addClass('active');
                _this.chooseCells($activeTd, true);
              }
              break;
            case 39:
              if (sides.nextHorizontal) {
                $activeTd.removeClass('active').next().addClass('active');
                _this.chooseCells($activeTd, true);
              }
              break;
            case 38:
              if (sides.prevVertical) {
                $activeTd.removeClass('active').parent().prev().find('td').eq(tdIndX).addClass('active');
                _this.chooseCells($activeTd, false);
              }
              break;
            case 40:
              if (sides.nextVertical) {
                $activeTd.removeClass('active').parent().next().find('td').eq(tdIndX).addClass('active');
                _this.chooseCells($activeTd, false);
              }
              break;
            case 8:
              $activeTd.text('');
              if (_this.typingHorizontal && sides.prevHorizontal) {
                $activeTd.removeClass('active').prev().addClass('active');
              } else if (!_this.typingHorizontal && sides.prevVertical) {
                $activeTd.removeClass('active').parent().prev().find('td').eq(tdIndX).addClass('active');
              }
          }
        }
        if ((_ref = e.keyCode) === 32 || _ref === 37 || _ref === 38 || _ref === 39 || _ref === 40 || _ref === 8) {
          e.preventDefault();
        }
        return true;
      });
      this.$questionsContainer.find('li').on('click', function(e) {
        var $firstCell, $self, isHorizontal, num;
        $self = $(e.target);
        num = $self.attr('data-number');
        isHorizontal = _this.crosswordData.wordsList[num].horizontal ? true : false;
        $firstCell = _this.$clickable.filter("[data-content='" + num + "']");
        _this.$questions.removeClass('active');
        $self.addClass('active');
        _this.$clickable.removeClass('active');
        $firstCell.addClass('active');
        _this.chooseCells($firstCell, isHorizontal);
        return true;
      });
      return true;
    };

    Crossword.prototype.createCrosswordTable = function() {
      var $table, crossCell, crossString, i, j, newCell, number, word, _ref, _ref1, _ref2;
      $table = $('<table />').addClass('crossword__table');
      _ref = this.crosswordData.lettersTable;
      for (i in _ref) {
        crossString = _ref[i];
        $table.append('<tr />');
        _ref1 = this.crosswordData.lettersTable[0];
        for (j in _ref1) {
          crossCell = _ref1[j];
          newCell = $('<td />');
          if (this.crosswordData.lettersTable[i][j]) {
            newCell.addClass('clickable');
          }
          newCell.appendTo($table.find('tr').last());
        }
      }
      $table.appendTo(this.$container);
      this.$clickable = $table.find('.clickable');
      _ref2 = this.crosswordData.wordsList;
      for (number in _ref2) {
        word = _ref2[number];
        $table.find('tr').eq(word.start[0]).find('td').eq(word.start[1]).attr('data-content', number);
      }
      return true;
    };

    Crossword.prototype.chooseCells = function($cell, tpHr) {
      var $nextTd, $prevTd, tdIndX;
      this.$clickable.removeClass('word');
      $nextTd = $cell;
      this.typingHorizontal = tpHr;
      if (this.typingHorizontal) {
        while ($nextTd.hasClass('clickable')) {
          $nextTd.addClass('word');
          $nextTd = $nextTd.next();
        }
        $prevTd = $cell.prev();
        while ($prevTd.hasClass('clickable')) {
          $prevTd.addClass('word');
          $prevTd = $prevTd.prev();
        }
      } else {
        tdIndX = $cell.parent().find('td').index($cell);
        while ($nextTd.hasClass('clickable')) {
          $nextTd.addClass('word');
          $nextTd = $nextTd.parent().next().find('td').eq(tdIndX);
        }
        $prevTd = $cell.parent().prev().find('td').eq(tdIndX);
        while ($prevTd.hasClass('clickable')) {
          $prevTd.addClass('word');
          $prevTd = $prevTd.parent().prev().find('td').eq(tdIndX);
        }
      }
      this.chooseQuestion($cell);
      return true;
    };

    Crossword.prototype.canSides = function($cell) {
      var sides, tdIndX;
      tdIndX = $cell.parent().find('td').index($cell);
      sides = {
        nextHorizontal: $cell.next().hasClass('clickable'),
        prevHorizontal: $cell.prev().hasClass('clickable'),
        nextVertical: $cell.parent().next().find('td').eq(tdIndX).hasClass('clickable'),
        prevVertical: $cell.parent().prev().find('td').eq(tdIndX).hasClass('clickable')
      };
      return sides;
    };

    Crossword.prototype.createQuestionsList = function() {
      var $newItem, $qListH, $qListV, newItemText, number, word, _ref;
      this.$qBlockV = $('<div />').addClass('questions__block').addClass('questions__block_vertical');
      this.$qBlockH = $('<div />').addClass('questions__block').addClass('questions__block_horizontal');
      $qListV = $('<ul />').appendTo(this.$qBlockV);
      $qListH = $('<ul />').appendTo(this.$qBlockH);
      _ref = this.crosswordData.wordsList;
      for (number in _ref) {
        word = _ref[number];
        newItemText = "" + number + ") " + word.q;
        $newItem = $('<li />').attr('data-number', number).text(newItemText);
        if (word.horizontal) {
          $newItem.appendTo($qListH);
        } else {
          $newItem.appendTo($qListV);
        }
      }
      this.$qBlockH.add(this.$qBlockV).appendTo(this.$questionsContainer).CustomScroll();
      this.$questions = this.$questionsContainer.find('li');
      return true;
    };

    Crossword.prototype.chooseQuestion = function($cell) {
      var number;
      number = this.findFirstCell($cell);
      if (this.typingHorizontal) {
        this.$qBlockH.CustomScroll('scrollToElem', "li[data-number='" + number + "']");
      } else {
        this.$qBlockV.CustomScroll('scrollToElem', "li[data-number='" + number + "']");
      }
      this.$questions.removeClass('active').filter("[data-number='" + number + "']").addClass('active');
      return true;
    };

    Crossword.prototype.findFirstCell = function($cell) {
      var $prevTd, tdIndX;
      $prevTd = $cell;
      if (this.typingHorizontal) {
        while ($prevTd.prev().hasClass('clickable')) {
          $prevTd = $prevTd.prev();
        }
      } else {
        tdIndX = $cell.parent().find('td').index($cell);
        while ($prevTd.parent().prev().find('td').eq(tdIndX).hasClass('clickable')) {
          $prevTd = $prevTd.parent().prev().find('td').eq(tdIndX);
        }
      }
      return $prevTd.attr('data-content');
    };

    return Crossword;

  })();

  window.Crossword = Crossword;

}).call(this);
